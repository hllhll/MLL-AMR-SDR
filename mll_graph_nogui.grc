options:
  parameters:
    author: hillel.ch
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: record_decode_433
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: acquire
  id: variable
  parameters:
    comment: ''
    value: 18*decoding_samp_per_sym
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1496, 1036.0]
    rotation: 0
    state: enabled
- name: available_bw
  id: variable
  parameters:
    comment: ''
    value: samp_rate_cap-offset_tune*2
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 804.0]
    rotation: 0
    state: true
- name: cap_sps
  id: variable
  parameters:
    comment: ''
    value: int(samp_rate_cap/sym_rate)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 76.0]
    rotation: 0
    state: true
- name: center_freq
  id: variable
  parameters:
    comment: ''
    value: int(465.6e6)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [352, 156.0]
    rotation: 0
    state: enabled
- name: center_freq
  id: variable_qtgui_range
  parameters:
    comment: '465624750

      465.62-465.64

      465.625'
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: int(433e6)
    step: '50'
    stop: int(434e6)
    value: int(433.9e6)
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 108.0]
    rotation: 0
    state: disabled
- name: center_tune_freq
  id: variable
  parameters:
    comment: ''
    value: center_freq-offset_tune
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 28.0]
    rotation: 0
    state: true
- name: channel_0_freq
  id: variable
  parameters:
    comment: ''
    value: '433049000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 900.0]
    rotation: 0
    state: enabled
- name: channel_freq
  id: variable
  parameters:
    comment: ''
    value: channel_0_freq+(channel_num*250000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [360, 1028.0]
    rotation: 0
    state: disabled
- name: channel_freq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: center_tune_freq-(available_bw/2)
    step: '500'
    stop: center_tune_freq+(available_bw/2)
    value: '465625000'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 1076.0]
    rotation: 0
    state: disabled
- name: channel_freq
  id: variable
  parameters:
    comment: ''
    value: '465625000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 1116.0]
    rotation: 0
    state: true
- name: channel_num
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '5'
    value: '5'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 788.0]
    rotation: 0
    state: disabled
- name: channel_shift
  id: variable
  parameters:
    comment: ''
    value: channel_freq-center_freq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 692.0]
    rotation: 0
    state: enabled
- name: constellation_4fsk
  id: variable_constellation
  parameters:
    comment: ''
    const_points: '[-1.5,-0.5,0.5,1.5]'
    dims: '1'
    precision: '2'
    rot_sym: '2'
    soft_dec_lut: '"auto"'
    sym_map: '[0, 2, 4, 6]'
    type: calcdist
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1056, 1624.0]
    rotation: 0
    state: enabled
- name: decoding_samp_per_sym
  id: variable
  parameters:
    comment: ''
    value: cap_sps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1688, 988.0]
    rotation: 0
    state: disabled
- name: decoding_samp_per_sym
  id: variable
  parameters:
    comment: ''
    value: '8'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1152, 604.0]
    rotation: 0
    state: enabled
- name: decoding_samp_rate
  id: variable
  parameters:
    comment: ''
    value: (sym_rate*decoding_samp_per_sym)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 604.0]
    rotation: 0
    state: true
- name: fsk_deviation_hz
  id: variable
  parameters:
    comment: gnuradio dude:700, 2100
    value: '600'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 12.0]
    rotation: 0
    state: enabled
- name: lbl_channel_freq
  id: variable_qtgui_label
  parameters:
    comment: ''
    formatter: None
    gui_hint: ''
    label: lbl_channel_freq
    type: real
    value: channel_freq/1000000
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 1344.0]
    rotation: 0
    state: disabled
- name: min_power_db
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: '-80'
    step: '0.1'
    stop: '1'
    value: '-56.000'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [920, 884.0]
    rotation: 0
    state: disabled
- name: offset_tune
  id: variable
  parameters:
    comment: ''
    value: 10e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 20.0]
    rotation: 0
    state: true
- name: samp_rate_cap
  id: variable
  parameters:
    comment: 'From my old capture, it seems like 6 channels

      are around 2.048M-250k, spanning ~1.5M,

      roughly 200k between each channel'
    value: 0.250e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 20.0]
    rotation: 0
    state: enabled
- name: signal_freq
  id: variable_qtgui_range
  parameters:
    comment: '465624750

      465.62-465.64

      465.625'
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: int(433e6)
    step: '50'
    stop: int(434e6)
    value: int(433.9e6)
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 700.0]
    rotation: 0
    state: disabled
- name: sym_rate
  id: variable
  parameters:
    comment: ''
    value: '6000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 12.0]
    rotation: 0
    state: true
- name: sync_damping
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: '0.01'
    step: '0.001'
    stop: '3'
    value: '1'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1376, 1628.0]
    rotation: 0
    state: disabled
- name: sync_loop_bw
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: '0.00001'
    step: '0.00001'
    stop: '1'
    value: '0.48782'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [880, 1612.0]
    rotation: 0
    state: disabled
- name: analog_pwr_squelch_xx_0
  id: analog_pwr_squelch_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: 1e-4
    comment: ''
    gate: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    ramp: '0'
    threshold: '-56.000'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [808, 1076.0]
    rotation: 0
    state: enabled
- name: analog_quadrature_demod_cf_0_0_0_1_0
  id: analog_quadrature_demod_cf
  parameters:
    affinity: ''
    alias: ''
    comment: 'this is the real formula

      samp_rate/(2*math.pi*fsk_deviation_hz)'
    gain: decoding_samp_rate/(2*math.pi*fsk_deviation_hz)
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1208, 1268.0]
    rotation: 0
    state: enabled
- name: analog_quadrature_demod_cf_0_0_0_1_0_0
  id: analog_quadrature_demod_cf
  parameters:
    affinity: ''
    alias: ''
    comment: 'this is the real formula

      samp_rate/(2*math.pi*fsk_deviation_hz)'
    gain: samp_rate_cap/(2*math.pi*fsk_deviation_hz)
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1520, 924.0]
    rotation: 0
    state: disabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: -offset_tune
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate_cap
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 512.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_1
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: -channel_shift
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate_cap
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 936.0]
    rotation: 0
    state: enabled
- name: blocks_add_const_vxx_0
  id: blocks_add_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '-3'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 1668.0]
    rotation: 0
    state: true
- name: blocks_char_to_float_0
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [116.0, 1648]
    rotation: 270
    state: true
- name: blocks_delay_0_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: 'Donno Y this is the

      calculation that turned out currect'
    delay: (acquire-1)*2
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1464, 1188.0]
    rotation: 0
    state: enabled
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'True'
    comment: ''
    file: C:\hll\miltel_no_fhss\on_premis_433\10_Live\live8_overnight_48k
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1176, 1000.0]
    rotation: 0
    state: disabled
- name: blocks_float_to_char_1
  id: blocks_float_to_char
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1844.0]
    rotation: 0
    state: true
- name: blocks_float_to_complex_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 1524.0]
    rotation: 180
    state: enabled
- name: blocks_multiply_const_vxx_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 1796.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_1
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: 'NURadio constellation object autoscales your

      constellation so that the symbol levels have a mean magnitude of 1.0.

      (e.g. 4FSK levels would be +/-0.5 and +/-1.5.'
    const: '0.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 1492.0]
    rotation: 180
    state: enabled
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: Wide offset tune
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 356.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_1
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: channel select
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 764.0]
    rotation: 0
    state: enabled
- name: blocks_repeat_0_0
  id: blocks_repeat
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    interp: decoding_samp_per_sym
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 1604.0]
    rotation: 0
    state: disabled
- name: blocks_sub_xx_0
  id: blocks_sub_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1640, 1316.0]
    rotation: 0
    state: enabled
- name: blocks_tagged_file_sink_0
  id: blocks_tagged_file_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    samp_rate: decoding_samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1024, 1356.0]
    rotation: 0
    state: enabled
- name: blocks_tcp_server_sink_0
  id: blocks_tcp_server_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ipaddr: 0.0.0.0
    noblock: 'False'
    port: '55525'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1600, 1776.0]
    rotation: 0
    state: enabled
- name: dc_blocker_xx_0_0
  id: dc_blocker_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: acquire
    long_form: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: ff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1464, 1388.0]
    rotation: 0
    state: enabled
- name: digital_constellation_decoder_cb_0
  id: digital_constellation_decoder_cb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: constellation_4fsk
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 1516.0]
    rotation: 180
    state: enabled
- name: digital_symbol_sync_xx_1
  id: digital_symbol_sync_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: constellation_4fsk
    damping: '1'
    loop_bw: '0.48782'
    max_dev: '1.2'
    maxoutbuf: '0'
    minoutbuf: '0'
    nfilters: '128'
    osps: '1'
    pfb_mf_taps: '[128]'
    resamp_type: digital.IR_MMSE_8TAP
    sps: decoding_samp_per_sym
    ted_gain: '1.5'
    ted_type: digital.TED_EARLY_LATE
    type: ff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [896, 1420.0]
    rotation: 180
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self, reset_tag=\"\
      \", reset_tag_value=\"\", lock_time=20, end_tag=\"\"):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.sync_block.__init__(\n            self,\n            name='Tagged\
      \ burst frequency lock',   # will show up in GRC\n            in_sig=[np.float32,\
      \ np.float32],\n            out_sig=[np.float32]\n        )\n        # if an\
      \ attribute with the same name as a parameter is found,\n        # a callback\
      \ is registered (properties work, too).\n\n        self._reset_tag = reset_tag\n\
      \        self._reset_tag_value = reset_tag_value\n        self._lock_len = lock_time\n\
      \        self._end_tag = end_tag\n        self._reset()\n\n    def get_tag_rel_offsets(self,\
      \ data, inpnum, tagname):\n    #def get_tags_rel_offsets(self, data, inpnum):\n\
      \        ret = []\n        tags = self.get_tags_in_window(inpnum, 0, len(data))\n\
      \        for tag in tags:\n            key = pmt.to_python(tag.key) # convert\
      \ from PMT to python string\n            value = pmt.to_python(tag.value) #\
      \ Note that the type(value) can be several things, it depends what PMT type\
      \ it was\n            if key==tagname:\n                item ={\n          \
      \          'reloff': tag.offset - self.nitems_read(inpnum),\n              \
      \      'name': tagname\n                }\n                ret.append(item)\n\
      \        return ret\n\n    def get_start_tag_rel_offsets(self, data, inpnum):\n\
      \        return self.get_tag_rel_offsets( data, inpnum, self._reset_tag)\n\n\
      \    def get_end_tag_rel_offsets(self, data, inpnum):\n        return self.get_tag_rel_offsets(\
      \ data, inpnum, self._end_tag)\n\n    def _reset(self):\n        self._state\
      \ = 0\n        self._lock_counter = 0\n        self._lock_value = 0.0\n\n  \
      \  def work(self, input_items, output_items):\n        signal = input_items[0]\n\
      \        dc_off = input_items[1]\n        # self.get_tags_in_window(which_input,\
      \ rel_start, rel_end)\n        # Will return a list of tags for the current\
      \ window (input items)\n        start_tag_poss = self.get_start_tag_rel_offsets(signal,\
      \ 0)\n        end_tag_poss = self.get_end_tag_rel_offsets(signal, 0)\n     \
      \   for i in range(len(signal)):\n            for tag in start_tag_poss:\n \
      \               if i==tag['reloff'] and tag['name']==self._reset_tag:\n    \
      \                # Reset detected\n                    self._reset()\n     \
      \               break # Next i\n\n            if self._state == 0: # Aquire\n\
      \                self._lock_counter += 1\n                if self._lock_counter\
      \ == self._lock_len: # End aquire\n                    self._state = 1;\n  \
      \                  self._lock_value = dc_off[i]\n                    #print(\"\
      lock \" + str(self._lock_value))\n                output_items[0][i] = signal[i]\
      \ - dc_off[i] # Plain DC Block\n            else:\n                # Lock DC\
      \ Value\n                output_items[0][i] = signal[i] - self._lock_value\n\
      \        return len(output_items[0])\n\n\n"
    affinity: ''
    alias: ''
    comment: ''
    end_tag: '"''squelch_eob"'
    lock_time: 20*decoding_samp_per_sym
    maxoutbuf: '0'
    minoutbuf: '0'
    reset_tag: '"squelch_sob"'
    reset_tag_value: '""'
  states:
    _io_cache: ('Tagged burst frequency lock', 'blk', [('reset_tag', "''"), ('reset_tag_value',
      "''"), ('lock_time', '20'), ('end_tag', "''")], [('0', 'float', 1), ('1', 'float',
      1)], [('0', 'float', 1)], 'Embedded Python Block example - a simple multiply
      const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1704, 1184.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nTag Rewrite\n\"\"\"\n\nimport numpy as np\nfrom gnuradio\
      \ import gr\nimport pmt\n\nlog = gr.logger(\"TR\")\nlog.set_level(\"DEBUG\"\
      )\n\nclass blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"TagRewrite - rewrite tag to any value\"\"\"\n\n  \
      \  def __init__(self, tag_name=\"\", target_tag_name=\"\"):  # only default\
      \ arguments here\n        \"\"\"arguments to this function show up as parameters\
      \ in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n       \
      \     name='Tag Copy',   # will show up in GRC\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.complex64]\n        )\n        # if an attribute with\
      \ the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.tag_name = pmt.intern(tag_name)\n  \
      \      self.target_tag_name = pmt.intern(target_tag_name)\n\n        # pass\
      \ through tags\n        self.set_tag_propagation_policy(gr.TPP_ALL_TO_ALL )\n\
      \n        log.debug(\"TR init done\")\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"Update tag value\"\"\"\n        output_items[0][:] = input_items[0]\n\
      \n        nr = len(input_items[0])\n        tags = self.get_tags_in_window(0,\
      \ 0, nr, self.tag_name)\n        for tag in tags:\n            #value = pmt.to_python(tag.value)\n\
      \            self.add_item_tag(0, tag.offset, self.target_tag_name, tag.value)\n\
      \n        return len(output_items[0])"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag_name: '"squelch_sob"'
    target_tag_name: '"burst"'
  states:
    _io_cache: ('Tag Copy', 'blk', [('tag_name', "''"), ('target_tag_name', "''")],
      [('0', 'complex', 1)], [('0', 'complex', 1)], 'TagRewrite - rewrite tag to any
      value', ['tag_name', 'target_tag_name'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 1324.0]
    rotation: 0
    state: disabled
- name: epy_block_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nTag Rewrite\n\"\"\"\n\nimport numpy as np\nfrom gnuradio\
      \ import gr\nimport pmt\n\nlog = gr.logger(\"TR\")\nlog.set_level(\"DEBUG\"\
      )\n\nclass blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"TagRewrite - rewrite tag to any value\"\"\"\n\n  \
      \  def __init__(self, tag_name=\"\", target_tag_name=\"\"):  # only default\
      \ arguments here\n        \"\"\"arguments to this function show up as parameters\
      \ in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n       \
      \     name='Tag Copy',   # will show up in GRC\n            in_sig=[np.complex64],\n\
      \            out_sig=[np.complex64]\n        )\n        # if an attribute with\
      \ the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.tag_name = pmt.intern(tag_name)\n  \
      \      self.target_tag_name = pmt.intern(target_tag_name)\n\n        # pass\
      \ through tags\n        self.set_tag_propagation_policy(gr.TPP_ALL_TO_ALL )\n\
      \n        log.debug(\"TR init done\")\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"Update tag value\"\"\"\n        output_items[0][:] = input_items[0]\n\
      \n        nr = len(input_items[0])\n        tags = self.get_tags_in_window(0,\
      \ 0, nr, self.tag_name)\n        for tag in tags:\n            #value = pmt.to_python(tag.value)\n\
      \            self.add_item_tag(0, tag.offset, self.target_tag_name, tag.value)\n\
      \n        return len(output_items[0])"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag_name: '"squelch_eob"'
    target_tag_name: '"burst"'
  states:
    _io_cache: ('Tag Copy', 'blk', [('tag_name', "''"), ('target_tag_name', "''")],
      [('0', 'complex', 1)], [('0', 'complex', 1)], 'TagRewrite - rewrite tag to any
      value', ['tag_name', 'target_tag_name'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 1412.0]
    rotation: 0
    state: disabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nTag Rewrite\n\"\"\"\n\nimport numpy as np\nfrom gnuradio\
      \ import gr\nimport pmt\n\nlog = gr.logger(\"TR\")\nlog.set_level(\"DEBUG\"\
      )\n\nclass blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"TagRewrite - rewrite tag to any value\"\"\"\n\n  \
      \  def __init__(self, tag_name=\"\", tag_value=1):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.sync_block.__init__(\n            self,\n            name='Tag\
      \ Rewrite',   # will show up in GRC\n            in_sig=[np.complex64],\n  \
      \          out_sig=[np.complex64]\n        )\n        # if an attribute with\
      \ the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.tag_name = pmt.intern(tag_name)\n  \
      \      self.tag_value = pmt.intern(str(tag_value))\n\n        # pass through\
      \ tags\n        self.set_tag_propagation_policy(gr.TPP_ALL_TO_ALL )\n\n    \
      \    log.debug(\"TR init done\")\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"Update tag value\"\"\"\n        output_items[0][:] = input_items[0]\n\
      \n        nr = len(input_items[0])\n        tags = self.get_tags_in_window(0,\
      \ 0, nr, self.tag_name)\n        for tag in tags:\n            self.add_item_tag(0,\
      \ tag.offset, self.tag_name, self.tag_value)\n\n        return len(output_items[0])"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag_name: '"squelch_sob"'
    tag_value: 'True'
  states:
    _io_cache: ('Tag Rewrite', 'blk', [('tag_name', "''"), ('tag_value', '1')], [('0',
      'complex', 1)], [('0', 'complex', 1)], 'TagRewrite - rewrite tag to any value',
      ['tag_name', 'tag_value'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [336, 1316.0]
    rotation: 0
    state: disabled
- name: epy_block_2_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nTag Rewrite\n\"\"\"\n\nimport numpy as np\nfrom gnuradio\
      \ import gr\nimport pmt\n\nlog = gr.logger(\"TR\")\nlog.set_level(\"DEBUG\"\
      )\n\nclass blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"TagRewrite - rewrite tag to any value\"\"\"\n\n  \
      \  def __init__(self, tag_name=\"\", tag_value=1):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.sync_block.__init__(\n            self,\n            name='Tag\
      \ Rewrite',   # will show up in GRC\n            in_sig=[np.complex64],\n  \
      \          out_sig=[np.complex64]\n        )\n        # if an attribute with\
      \ the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.tag_name = pmt.intern(tag_name)\n  \
      \      self.tag_value = pmt.intern(str(tag_value))\n\n        # pass through\
      \ tags\n        self.set_tag_propagation_policy(gr.TPP_ALL_TO_ALL )\n\n    \
      \    log.debug(\"TR init done\")\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"Update tag value\"\"\"\n        output_items[0][:] = input_items[0]\n\
      \n        nr = len(input_items[0])\n        tags = self.get_tags_in_window(0,\
      \ 0, nr, self.tag_name)\n        for tag in tags:\n            self.add_item_tag(0,\
      \ tag.offset, self.tag_name, self.tag_value)\n\n        return len(output_items[0])"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag_name: '"squelch_eob"'
    tag_value: 'False'
  states:
    _io_cache: ('Tag Rewrite', 'blk', [('tag_name', "''"), ('tag_value', '1')], [('0',
      'complex', 1)], [('0', 'complex', 1)], 'TagRewrite - rewrite tag to any value',
      ['tag_name', 'tag_value'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 1404.0]
    rotation: 0
    state: disabled
- name: epy_block_2_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nTag Rewrite\n\"\"\"\n\nimport numpy as np\nfrom gnuradio\
      \ import gr\nimport pmt\n\nlog = gr.logger(\"TR\")\nlog.set_level(\"DEBUG\"\
      )\n\nclass blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"TagRewrite - rewrite tag to any value\"\"\"\n\n  \
      \  def __init__(self, tag_nameT=\"squelch_sob\", tag_nameF=\"squelch_eob\"):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Tag Manipulate',   # will show up in GRC\n    \
      \        in_sig=[np.complex64],\n            out_sig=[np.complex64]\n      \
      \  )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.tag_nameT\
      \ = pmt.intern(tag_nameT)\n        self.tag_nameF = pmt.intern(tag_nameF)\n\n\
      \        # pass through tags\n        self.set_tag_propagation_policy(gr.TPP_DONT\
      \ )\n\n        log.debug(\"TR init done\")\n\n    def work(self, input_items,\
      \ output_items):\n        \"\"\"Update tag value\"\"\"\n        output_items[0][:]\
      \ = input_items[0]\n\n        nr = len(input_items[0])\n        tags = self.get_tags_in_window(0,\
      \ 0, nr, self.tag_nameT)\n        for tag in tags:\n            self.add_item_tag(0,\
      \ tag.offset, pmt.intern(str(\"burst\")), pmt.from_bool(True))\n        tags\
      \ = self.get_tags_in_window(0, 0, nr, self.tag_nameF)\n        for tag in tags:\n\
      \            self.add_item_tag(0, tag.offset, pmt.intern(str(\"burst\")), pmt.from_bool(False))\n\
      \        return len(output_items[0])"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag_nameF: '"squelch_eob"'
    tag_nameT: '"squelch_sob"'
  states:
    _io_cache: ('Tag Manipulate', 'blk', [('tag_nameT', "'squelch_sob'"), ('tag_nameF',
      "'squelch_eob'")], [('0', 'complex', 1)], [('0', 'complex', 1)], 'TagRewrite
      - rewrite tag to any value', ['tag_nameF', 'tag_nameT'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 1236.0]
    rotation: 0
    state: enabled
- name: low_pass_filter_0
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: '6000'
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate_cap
    type: fir_filter_ccf
    width: '3500'
    win: firdes.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [992, 704.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_1
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: decoding_samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: channel_freq
    fftsize: 1024*6
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: firdes.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 704.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: raw_signal
    label10: Signal 10
    label2: dc_offset_magic
    label3: filtered
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '2'
    size: 215*decoding_samp_per_sym
    srate: decoding_samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_TAG
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '"squelch_sob"'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '10'
    ymin: '-10'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2168, 1072.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: raw_signal
    label10: Signal 10
    label2: dc_offset_magic
    label3: filtered
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: int(decoding_samp_rate*0.250)*3
    srate: samp_rate_cap
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_AUTO
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '10'
    ymin: '-10'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1848, 864.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: 1024*5*3-3
    srate: decoding_samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_TAG
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '"burst"'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '3'
    ymin: '-3'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 1216.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_1_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: decoding_samp_per_sym*180
    srate: decoding_samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_TAG
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '"squelch_sob"'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 1584.0]
    rotation: 0
    state: disabled
- name: rational_resampler_xxx_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: int(samp_rate_cap)
    fbw: '0.0001'
    interp: decoding_samp_rate
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: ''
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 732.0]
    rotation: 0
    state: true
- name: rtlsdr_source_0
  id: rtlsdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: '"rtl_tcp=10.100.102.1"'
    bb_gain0: '9'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '0'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: center_tune_freq
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: '38'
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'False'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '8'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '0'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate_cap
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 216.0]
    rotation: 0
    state: enabled

connections:
- [analog_pwr_squelch_xx_0, '0', analog_quadrature_demod_cf_0_0_0_1_0, '0']
- [analog_pwr_squelch_xx_0, '0', blocks_file_sink_0, '0']
- [analog_pwr_squelch_xx_0, '0', epy_block_2, '0']
- [analog_pwr_squelch_xx_0, '0', epy_block_2_1, '0']
- [analog_quadrature_demod_cf_0_0_0_1_0, '0', blocks_delay_0_0, '0']
- [analog_quadrature_demod_cf_0_0_0_1_0, '0', dc_blocker_xx_0_0, '0']
- [analog_quadrature_demod_cf_0_0_0_1_0_0, '0', qtgui_time_sink_x_0_0, '0']
- [analog_sig_source_x_0, '0', blocks_multiply_xx_0, '1']
- [analog_sig_source_x_1, '0', blocks_multiply_xx_1, '1']
- [blocks_add_const_vxx_0, '0', blocks_float_to_char_1, '0']
- [blocks_add_const_vxx_0, '0', blocks_repeat_0_0, '0']
- [blocks_char_to_float_0, '0', blocks_multiply_const_vxx_0_0, '0']
- [blocks_delay_0_0, '0', blocks_sub_xx_0, '0']
- [blocks_delay_0_0, '0', epy_block_0, '0']
- [blocks_delay_0_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_float_to_char_1, '0', blocks_tcp_server_sink_0, '0']
- [blocks_float_to_complex_0, '0', digital_constellation_decoder_cb_0, '0']
- [blocks_multiply_const_vxx_0_0, '0', blocks_add_const_vxx_0, '0']
- [blocks_multiply_const_vxx_1, '0', digital_symbol_sync_xx_1, '0']
- [blocks_multiply_xx_0, '0', blocks_multiply_xx_1, '0']
- [blocks_multiply_xx_1, '0', low_pass_filter_0, '0']
- [blocks_repeat_0_0, '0', qtgui_time_sink_x_1_0, '0']
- [blocks_sub_xx_0, '0', epy_block_0, '1']
- [dc_blocker_xx_0_0, '0', blocks_sub_xx_0, '1']
- [digital_constellation_decoder_cb_0, '0', blocks_char_to_float_0, '0']
- [digital_symbol_sync_xx_1, '0', blocks_float_to_complex_0, '0']
- [epy_block_0, '0', blocks_multiply_const_vxx_1, '0']
- [epy_block_0, '0', qtgui_time_sink_x_0, '1']
- [epy_block_1, '0', epy_block_2_0, '0']
- [epy_block_1_0, '0', blocks_tagged_file_sink_0, '0']
- [epy_block_1_0, '0', qtgui_time_sink_x_1, '0']
- [epy_block_2, '0', epy_block_1, '0']
- [epy_block_2_0, '0', epy_block_1_0, '0']
- [epy_block_2_1, '0', blocks_tagged_file_sink_0, '0']
- [epy_block_2_1, '0', qtgui_time_sink_x_1, '0']
- [low_pass_filter_0, '0', rational_resampler_xxx_0, '0']
- [rational_resampler_xxx_0, '0', analog_pwr_squelch_xx_0, '0']
- [rational_resampler_xxx_0, '0', analog_quadrature_demod_cf_0_0_0_1_0_0, '0']
- [rational_resampler_xxx_0, '0', qtgui_freq_sink_x_1, '0']
- [rtlsdr_source_0, '0', blocks_multiply_xx_0, '0']

metadata:
  file_format: 1
